{
    "project": {
        "name": "gridster.js",
        "description": "gridster.js, a drag-and-drop multi-column jQuery grid plugin",
        "version": "v0.8.0",
        "url": "http://gridster.net/",
        "logo": "https://ducksboard.com/static/images/svg/logo-ducksboard-black-small.svg"
    },
    "files": {
        "src\\jquery.collision.js": {
            "name": "src\\jquery.collision.js",
            "modules": {},
            "classes": {
                "Collision": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\jquery.coords.js": {
            "name": "src\\jquery.coords.js",
            "modules": {},
            "classes": {
                "Coords": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\jquery.draggable.js": {
            "name": "src\\jquery.draggable.js",
            "modules": {},
            "classes": {
                "Draggable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\jquery.gridster.js": {
            "name": "src\\jquery.gridster.js",
            "modules": {},
            "classes": {
                "Gridster": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Collision": {
            "name": "Collision",
            "shortname": "Collision",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Gridster"
            ],
            "file": "src\\jquery.collision.js",
            "line": 32,
            "description": "Detects collisions between a DOM element against other DOM elements or\nCoords objects.",
            "uses": [
                "Coords"
            ],
            "params": [
                {
                    "name": "el",
                    "description": "The jQuery wrapped HTMLElement.",
                    "type": "HTMLElement"
                },
                {
                    "name": "colliders",
                    "description": "Can be a jQuery collection\n of HTMLElements or an Array of Coords instances.",
                    "type": "HTMLElement|Array"
                },
                {
                    "name": "options",
                    "description": "An Object with all options you want to\n       overwrite:",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "overlapping_region",
                            "description": "Determines when collision\n   is valid, depending on the overlapped area. Values can be: 'N', 'S',\n   'W', 'E', 'C' or 'all'. Default is 'C'.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "on_overlap_start",
                            "description": "Executes a function the first\n   time each `collider ` is overlapped.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "on_overlap_stop",
                            "description": "Executes a function when a\n   `collider` is no longer collided.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "on_overlap",
                            "description": "Executes a function when the\nmouse is moved during the collision.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "Collision instance.",
                "type": "Object"
            },
            "is_constructor": 1
        },
        "Coords": {
            "name": "Coords",
            "shortname": "Coords",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Collision"
            ],
            "file": "src\\jquery.coords.js",
            "line": 22,
            "description": "Creates objects with coordinates (x1, y1, x2, y2, cx, cy, width, height)\nto simulate DOM elements on the screen.\nCoords is used by Gridster to create a faux grid with any DOM element can\ncollide.",
            "params": [
                {
                    "name": "obj",
                    "description": "The jQuery HTMLElement or a object with: left,\ntop, width and height properties.",
                    "type": "HTMLElement|Object"
                }
            ],
            "return": {
                "description": "Coords instance.",
                "type": "Object"
            },
            "is_constructor": 1
        },
        "Draggable": {
            "name": "Draggable",
            "shortname": "Draggable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Gridster"
            ],
            "file": "src\\jquery.draggable.js",
            "line": 52,
            "description": "Basic drag implementation for DOM elements inside a container.\nProvide start/stop/drag callbacks.",
            "params": [
                {
                    "name": "el",
                    "description": "The HTMLelement that contains all the widgets\n to be dragged.",
                    "type": "HTMLElement"
                },
                {
                    "name": "options",
                    "description": "An Object with all options you want to\n       overwrite:",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "items",
                            "description": "Define who will\n    be the draggable items. Can be a CSS Selector String or a\n    collection of HTMLElements.",
                            "type": "HTMLElement|String",
                            "optional": true
                        },
                        {
                            "name": "distance",
                            "description": "Distance in pixels after mousedown\n    the mouse must move before dragging should start.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "limit",
                            "description": "Constrains dragging to the width of\n    the container",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "offset_left",
                            "description": "Offset added to the item\n    that is being dragged.",
                            "type": "Offset_left",
                            "optional": true
                        },
                        {
                            "name": "drag",
                            "description": "Executes a callback when the mouse is\n    moved during the dragging.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "start",
                            "description": "Executes a callback when the drag\n    starts.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "stop",
                            "description": "Executes a callback when the drag stops.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "[options.ignore_dragging] Array of node names\n     that sould not trigger dragging, by default is `['INPUT', 'TEXTAREA',\n     'SELECT', 'BUTTON']",
                    "description": "`. If a function is used return true to ignore dragging.",
                    "type": "Object|Function"
                }
            ],
            "return": {
                "description": "Returns `el`.",
                "type": "Object"
            },
            "is_constructor": 1
        },
        "Gridster": {
            "name": "Gridster",
            "shortname": "Gridster",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\jquery.gridster.js",
            "line": 85,
            "uses": [
                "Draggable",
                "Collision"
            ],
            "params": [
                {
                    "name": "el",
                    "description": "The HTMLelement that contains all the widgets.",
                    "type": "HTMLElement"
                },
                {
                    "name": "options",
                    "description": "An Object with all options you want to\n       overwrite:",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "widget_selector",
                            "description": "Define who will\n           be the draggable widgets. Can be a CSS Selector String or a\n           collection of HTMLElements",
                            "type": "HTMLElement|String",
                            "optional": true
                        },
                        {
                            "name": "widget_margins",
                            "description": "Margin between widgets.\n           The first index for the horizontal margin (left, right) and\n           the second for the vertical margin (top, bottom).",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "widget_base_dimensions",
                            "description": "Base widget dimensions\n           in pixels. The first index for the width and the second for the\n           height.",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "extra_cols",
                            "description": "Add more columns in addition to\n           those that have been calculated.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "extra_rows",
                            "description": "Add more rows in addition to\n           those that have been calculated.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "min_cols",
                            "description": "The minimum required columns.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "max_cols",
                            "description": "The maximum columns possible (set to null\n           for no maximum).",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "min_rows",
                            "description": "The minimum required rows.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "avoid_overlapped_widgets",
                            "description": "Avoid that widgets loaded\n           from the DOM can be overlapped. It is helpful if the positions were\n           bad stored in the database or if there was any conflict.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "auto_init",
                            "description": "Automatically call gridster init\n           method or not when the plugin is instantiated.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "serialize_params",
                            "description": "Return the data you want\n           for each widget in the serialization. Two arguments are passed:\n           `$w`: the jQuery wrapped HTMLElement, and `wgd`: the grid\n           coords object (`col`, `row`, `size_x`, `size_y`).",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "shift_larger_widgets_down",
                            "description": "Determines if how widgets get pushes\n           out of the way of the player. If set to false smaller widgets will not move larger\n           widgets out of their way . Defaults to true.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "shift_widgets_up",
                            "description": "Determines if the player will automatically\n           condense the grid and not allow a widget to have space above it. Defaults to true.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "show_element",
                            "description": "Makes the given element visible. Two arguments are passed:\n           `$el`: the jQuery wrapped HTMLElement, and `callback`: a function that is executed\n           after the element is made visible. The callback parameter is optional.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "hide_element",
                            "description": "Hides the given element. Two arguments are passed:\n           `$el`: the jQuery wrapped HTMLElement, and `callback`: a function that is executed\n           after the element is hidden. The callback parameter is optional.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "collision",
                            "description": "An Object with all options for\n           Collision class you want to overwrite. See Collision docs for\n           more info.",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "wait_for_mouseup",
                                    "description": "Default is false.\n                      If true then it will not move colliding widgets during drag, but only on\n                      mouseup.",
                                    "type": "Boolean",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "draggable",
                            "description": "An Object with all options for\n           Draggable class you want to overwrite. See Draggable docs for more info.",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "ignore_dragging",
                                    "description": "Note that\n                   if you use a Function, and resize is enabled, you should ignore the\n                   resize handlers manually (options.resize.handle_class).",
                                    "type": "Object|Function",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "resize",
                            "description": "An Object with resize config options.",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "enabled",
                                    "description": "Set to true to enable\n                   resizing.",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "handle_append_to",
                                    "description": "Set a valid CSS\n                   selector to append resize handles to.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "handle_class",
                                    "description": "CSS class name used\n                   by resize handles.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "start",
                                    "description": "Function executed\n                   when resizing starts.",
                                    "type": "Function",
                                    "optional": true
                                },
                                {
                                    "name": "resize",
                                    "description": "Function executed\n                   during the resizing.",
                                    "type": "Function",
                                    "optional": true
                                },
                                {
                                    "name": "stop",
                                    "description": "Function executed\n                   when resizing stops.",
                                    "type": "Function",
                                    "optional": true
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "[options.autogenerate_stylesheet] If true, all the\n           CSS required to position all widgets in their respective columns\n           and rows will be generated automatically and injected to the\n           `<head>` of the document. You can set this to false, and write\n           your own CSS targeting rows and cols via data-attributes like so:\n           `[data-col=\"1\"]",
                    "description": "{ left: 10px; }`",
                    "type": "Boolean"
                },
                {
                    "name": "[options.resize.axes] Axes in which widgets can be\n                   resized. Possible values: ['x', 'y', 'both']",
                    "description": ".",
                    "type": "Array"
                },
                {
                    "name": "[options.resize.max_size] Limit widget dimensions\n                   when resizing. Array values should be integers:\n                   `[max_cols_occupied, max_rows_occupied]",
                    "description": "`",
                    "type": "Array"
                },
                {
                    "name": "[options.resize.min_size] Limit widget dimensions\n                   when resizing. Array values should be integers:\n                   `[min_cols_occupied, min_rows_occupied]",
                    "description": "`",
                    "type": "Array"
                }
            ],
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "src\\jquery.gridster.js",
            "line": 202,
            "description": "Convert properties to Integer",
            "params": [
                {
                    "name": "obj",
                    "description": "- config object to be converted",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the converted object.",
                "type": "Object"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 225,
            "description": "Sorts an Array of grid coords objects (representing the grid coords of\neach widget) in ascending way.",
            "itemtype": "method",
            "name": "sort_by_row_asc",
            "params": [
                {
                    "name": "widgets",
                    "description": "Array of grid coords objects",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns the array sorted.",
                "type": "Array"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 252,
            "description": "Sorts an Array of grid coords objects (representing the grid coords of\neach widget) placing first the empty cells upper left.",
            "itemtype": "method",
            "name": "sort_by_row_and_col_asc",
            "params": [
                {
                    "name": "widgets",
                    "description": "Array of grid coords objects",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns the array sorted.",
                "type": "Array"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 274,
            "description": "Sorts an Array of grid coords objects by column (representing the grid\ncoords of each widget) in ascending way.",
            "itemtype": "method",
            "name": "sort_by_col_asc",
            "params": [
                {
                    "name": "widgets",
                    "description": "Array of grid coords objects",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns the array sorted.",
                "type": "Array"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 296,
            "description": "Sorts an Array of grid coords objects (representing the grid coords of\neach widget) in descending way.",
            "itemtype": "method",
            "name": "sort_by_row_desc",
            "params": [
                {
                    "name": "widgets",
                    "description": "Array of grid coords objects",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns the array sorted.",
                "type": "Array"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 317,
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 342,
            "description": "Disables dragging.",
            "itemtype": "method",
            "name": "disable",
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 355,
            "description": "Enables dragging.",
            "itemtype": "method",
            "name": "enable",
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 367,
            "description": "Disables drag-and-drop widget resizing.",
            "itemtype": "method",
            "name": "disable",
            "return": {
                "description": "Returns instance of gridster Class.",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 380,
            "description": "Enables drag-and-drop widget resizing.",
            "itemtype": "method",
            "name": "enable",
            "return": {
                "description": "Returns instance of gridster Class.",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 393,
            "description": "Add a new widget to the grid.",
            "itemtype": "method",
            "name": "add_widget",
            "params": [
                {
                    "name": "html",
                    "description": "The string representing the HTML of the widget\n or the HTMLElement.",
                    "type": "String|HTMLElement"
                },
                {
                    "name": "size_x",
                    "description": "The nº of rows the widget occupies horizontally.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "size_y",
                    "description": "The nº of columns the widget occupies vertically.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "col",
                    "description": "The column the widget should start in.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "row",
                    "description": "The row the widget should start in.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "max_size",
                    "description": "max_size Maximun size (in units) for width and height.",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "min_size",
                    "description": "min_size Minimum size (in units) for width and height.",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Function executed after the widget is shown.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the jQuery wrapped HTMLElement representing.\n the widget that was just created.",
                "type": "HTMLElement"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 470,
            "description": "Change widget size limits.",
            "itemtype": "method",
            "name": "set_widget_min_size",
            "params": [
                {
                    "name": "$widget",
                    "description": "The jQuery wrapped HTMLElement\n representing the widget or an index representing the desired widget.",
                    "type": "HTMLElement|Number"
                },
                {
                    "name": "min_size",
                    "description": "Minimum size (in grid units) for width and height.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns instance of gridster Class.",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 495,
            "description": "Change widget size limits.",
            "itemtype": "method",
            "name": "set_widget_max_size",
            "params": [
                {
                    "name": "$widget",
                    "description": "The jQuery wrapped HTMLElement\n representing the widget or an index representing the desired widget.",
                    "type": "HTMLElement|Number"
                },
                {
                    "name": "max_size",
                    "description": "Maximun size (in units) for width and height.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns instance of gridster Class.",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 520,
            "description": "Append the resize handle into a widget.",
            "itemtype": "method",
            "name": "add_resize_handle\n representing the widget.",
            "return": {
                "description": "Returns instance of gridster Class.",
                "type": "HTMLElement"
            },
            "params": [
                {
                    "name": "$w",
                    "description": ""
                }
            ],
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 539,
            "description": "Change the size of a widget. Width is limited to the current grid width.",
            "itemtype": "method",
            "name": "resize_widget",
            "params": [
                {
                    "name": "$widget",
                    "description": "The jQuery wrapped HTMLElement\n representing the widget.",
                    "type": "HTMLElement"
                },
                {
                    "name": "size_x",
                    "description": "The number of columns that will occupy the widget.\n By default <code>size_x</code> is limited to the space available from\n the column where the widget begins, until the last column to the right.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "size_y",
                    "description": "The number of rows that will occupy the widget.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Function executed when the widget is removed.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns $widget.",
                "type": "HTMLElement"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 590,
            "description": "Expand the widget. Width is set to the current grid width.",
            "itemtype": "method",
            "name": "expand_widget",
            "params": [
                {
                    "name": "$widget",
                    "description": "The jQuery wrapped HTMLElement\n representing the widget.",
                    "type": "HTMLElement"
                },
                {
                    "name": "size_x",
                    "description": "The number of cols that will occupy the widget.",
                    "type": "Number"
                },
                {
                    "name": "size_y",
                    "description": "The number of rows that will occupy the widget.",
                    "type": "Number"
                },
                {
                    "name": "col",
                    "description": "The column to resize the widget from.",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "Function executed when the widget is expanded.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns $widget.",
                "type": "HTMLElement"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 637,
            "description": "Collapse the widget to it's pre-expanded size",
            "itemtype": "method",
            "name": "collapse_widget",
            "params": [
                {
                    "name": "$widget",
                    "description": "The jQuery wrapped HTMLElement\n representing the widget.",
                    "type": "HTMLElement"
                },
                {
                    "name": "callback",
                    "description": "Function executed when the widget is collapsed.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns $widget.",
                "type": "HTMLElement"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 672,
            "description": "Fit the size of a widget to its content (best guess)",
            "itemtype": "method",
            "name": "fit_to_content",
            "params": [
                {
                    "name": "$widget",
                    "description": "$widget The jQuery wrapped HTMLElement",
                    "type": "HTMLElement"
                },
                {
                    "name": "max_cols",
                    "description": "max number of columns a widget can take up",
                    "type": "Number"
                },
                {
                    "name": "max_rows",
                    "description": "max number of rows a widget can take up",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "Function executed when the widget is fit to content.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns $widget.",
                "type": "HTMLElement"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 711,
            "description": "Centers widgets in grid",
            "itemtype": "method",
            "name": "center_widgets",
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 798,
            "description": "Mutate widget dimensions and position in the grid map.",
            "itemtype": "method",
            "name": "mutate_widget_in_gridmap",
            "params": [
                {
                    "name": "$widget",
                    "description": "The jQuery wrapped HTMLElement\n representing the widget to mutate.",
                    "type": "HTMLElement"
                },
                {
                    "name": "wgd",
                    "description": "Current widget grid data (col, row, size_x, size_y).",
                    "type": "Object"
                },
                {
                    "name": "new_wgd",
                    "description": "New widget grid data.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns instance of gridster Class.",
                "type": "HTMLElement"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 898,
            "description": "Move down widgets in cells represented by the arguments col, row, size_x,\nsize_y",
            "itemtype": "method",
            "name": "empty_cells",
            "params": [
                {
                    "name": "col",
                    "description": "The column where the group of cells begin.",
                    "type": "Number"
                },
                {
                    "name": "row",
                    "description": "The row where the group of cells begin.",
                    "type": "Number"
                },
                {
                    "name": "size_x",
                    "description": "The number of columns that the group of cells\noccupy.",
                    "type": "Number"
                },
                {
                    "name": "size_y",
                    "description": "The number of rows that the group of cells\noccupy.",
                    "type": "Number"
                },
                {
                    "name": "$exclude",
                    "description": "Exclude widgets from being moved.",
                    "type": "HTMLElement",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Class"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 940,
            "description": "Move up widgets below cells represented by the arguments col, row, size_x,\nsize_y.",
            "itemtype": "method",
            "name": "remove_empty_cells",
            "params": [
                {
                    "name": "col",
                    "description": "The column where the group of cells begin.",
                    "type": "Number"
                },
                {
                    "name": "row",
                    "description": "The row where the group of cells begin.",
                    "type": "Number"
                },
                {
                    "name": "size_x",
                    "description": "The number of columns that the group of cells\noccupy.",
                    "type": "Number"
                },
                {
                    "name": "size_y",
                    "description": "The number of rows that the group of cells\noccupy.",
                    "type": "Number"
                },
                {
                    "name": "exclude",
                    "description": "Exclude widgets from being moved.",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 972,
            "description": "Get the most left column below to add a new widget.",
            "itemtype": "method",
            "name": "next_position",
            "params": [
                {
                    "name": "size_x",
                    "description": "The nº of rows the widget occupies horizontally.",
                    "type": "Number"
                },
                {
                    "name": "size_y",
                    "description": "The nº of columns the widget occupies vertically.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns a grid coords object representing the future\n widget coords.",
                "type": "Object"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 1022,
            "description": "Remove a widget from the grid.",
            "itemtype": "method",
            "name": "remove_widget",
            "params": [
                {
                    "name": "el",
                    "description": "The jQuery wrapped HTMLElement you want to remove.",
                    "type": "HTMLElement"
                },
                {
                    "name": "silent",
                    "description": "If true, widgets below the removed one\nwill not move up. If a Function is passed it will be used as callback.",
                    "type": "Boolean|Function",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Function executed after the widget is removed.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 1077,
            "description": "Remove all widgets from the grid.",
            "itemtype": "method",
            "name": "remove_all_widgets",
            "params": [
                {
                    "name": "callback",
                    "description": "Function executed for each widget removed.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 1093,
            "description": "Returns a serialized array of the widgets in the grid.",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "$widgets",
                    "description": "The collection of jQuery wrapped\n HTMLElements you want to serialize. If no argument is passed all widgets\n will be serialized.",
                    "type": "HTMLElement",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns an Array of Objects with the data specified in\n the serialize_params option.",
                "type": "Array"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 1115,
            "description": "Returns a serialized array of the widgets that have changed their\n position.",
            "itemtype": "method",
            "name": "serialize_changed",
            "return": {
                "description": "Returns an Array of Objects with the data specified in\n the serialize_params option.",
                "type": "Array"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 1128,
            "description": "Convert widgets from DOM elements to \"widget grid data\" Objects.",
            "itemtype": "method",
            "name": "dom_to_coords",
            "params": [
                {
                    "name": "$widget",
                    "description": "The widget to be converted.",
                    "type": "HTMLElement"
                }
            ],
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 1148,
            "description": "Creates the grid coords object representing the widget an add it to the\nmapped array of positions.",
            "itemtype": "method",
            "name": "register_widget",
            "params": [
                {
                    "name": "$el",
                    "description": "jQuery wrapped HTMLElement representing\n the widget, or an \"widget grid data\" Object with (col, row, el ...).",
                    "type": "HTMLElement|Object"
                }
            ],
            "return": {
                "description": "Returns true if the widget final position is different\n than the original.",
                "type": "Boolean"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 1199,
            "description": "Update in the mapped array of positions the value of cells represented by\nthe grid coords object passed in the `grid_data` param.",
            "params": [
                {
                    "name": "grid_data",
                    "description": "The grid coords object representing the cells\n to update in the mapped array.",
                    "type": "Object"
                },
                {
                    "name": "value",
                    "description": "Pass `false` or the jQuery wrapped\n HTMLElement, depends if you want to delete an existing position or add\n a new one.",
                    "type": "HTMLElement|Boolean"
                }
            ],
            "itemtype": "method",
            "name": "update_widget_position",
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 1222,
            "description": "Update the width and height for a widgets coordinate data.",
            "params": [
                {
                    "name": "$widget",
                    "description": "The widget to update.",
                    "type": "HTMLElement"
                },
                {
                    "name": "wgd",
                    "description": "wgd Current widget grid data (col, row, size_x, size_y).",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "update_widget_dimensions",
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 1254,
            "description": "Update dimensions for all widgets in the grid.",
            "itemtype": "method",
            "name": "update_widgets_dimensions",
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 1272,
            "description": "Remove a widget from the mapped array of positions.",
            "itemtype": "method",
            "name": "remove_from_gridmap",
            "params": [
                {
                    "name": "grid_data",
                    "description": "The grid coords object representing the cells\n to update in the mapped array.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 1285,
            "description": "Add a widget to the mapped array of positions.",
            "itemtype": "method",
            "name": "add_to_gridmap",
            "params": [
                {
                    "name": "grid_data",
                    "description": "The grid coords object representing the cells\n to update in the mapped array.",
                    "type": "Object"
                },
                {
                    "name": "value",
                    "description": "The value to set in the specified\n position .",
                    "type": "HTMLElement|Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 1300,
            "description": "Make widgets draggable.",
            "uses": [
                "Draggable"
            ],
            "itemtype": "method",
            "name": "draggable",
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 1341,
            "description": "Bind resize events to get resize working.",
            "itemtype": "method",
            "name": "resizable",
            "return": {
                "description": "Returns instance of gridster Class.",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 1369,
            "description": "Setup things required for resizing. Like build templates for drag handles.",
            "itemtype": "method",
            "name": "setup_resize",
            "return": {
                "description": "Returns instance of gridster Class.",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 1395,
            "description": "This function is executed when the player begins to be dragged.",
            "itemtype": "method",
            "name": "on_start_drag",
            "params": [
                {
                    "name": "event",
                    "description": "The original browser event",
                    "type": "Event"
                },
                {
                    "name": "ui",
                    "description": "A prepared ui object with useful drag-related data",
                    "type": "Object"
                }
            ],
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 1451,
            "description": "This function is executed when the player is being dragged.",
            "itemtype": "method",
            "name": "on_drag",
            "params": [
                {
                    "name": "event",
                    "description": "The original browser event",
                    "type": "Event"
                },
                {
                    "name": "ui",
                    "description": "A prepared ui object with useful drag-related data",
                    "type": "Object"
                }
            ],
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 1508,
            "description": "This function is executed when the player stops being dragged.",
            "itemtype": "method",
            "name": "on_stop_drag",
            "params": [
                {
                    "name": "event",
                    "description": "The original browser event",
                    "type": "Event"
                },
                {
                    "name": "ui",
                    "description": "A prepared ui object with useful drag-related data",
                    "type": "Object"
                }
            ],
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 1601,
            "description": "This function is executed every time a widget starts to be resized.",
            "itemtype": "method",
            "name": "on_start_resize",
            "params": [
                {
                    "name": "event",
                    "description": "The original browser event",
                    "type": "Event"
                },
                {
                    "name": "ui",
                    "description": "A prepared ui object with useful drag-related data",
                    "type": "Object"
                }
            ],
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 1664,
            "description": "This function is executed every time a widget stops being resized.",
            "itemtype": "method",
            "name": "on_stop_resize",
            "params": [
                {
                    "name": "event",
                    "description": "The original browser event",
                    "type": "Event"
                },
                {
                    "name": "ui",
                    "description": "A prepared ui object with useful drag-related data",
                    "type": "Object"
                }
            ],
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 1705,
            "description": "This function is executed when a widget is being resized.",
            "itemtype": "method",
            "name": "on_resize",
            "params": [
                {
                    "name": "event",
                    "description": "The original browser event",
                    "type": "Event"
                },
                {
                    "name": "ui",
                    "description": "A prepared ui object with useful drag-related data",
                    "type": "Object"
                }
            ],
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 1799,
            "description": "Executes the callbacks passed as arguments when a column begins to be\noverlapped or stops being overlapped.",
            "params": [
                {
                    "name": "start_callback",
                    "description": "Function executed when a new column\n begins to be overlapped. The column is passed as first argument.",
                    "type": "Function"
                },
                {
                    "name": "stop_callback",
                    "description": "Function executed when a column stops\n being overlapped. The column is passed as first argument.",
                    "type": "Function"
                }
            ],
            "itemtype": "method",
            "name": "on_overlapped_column_change",
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 1839,
            "description": "Executes the callbacks passed as arguments when a row starts to be\noverlapped or stops being overlapped.",
            "params": [
                {
                    "name": "start_callback",
                    "description": "Function executed when a new row begins\n to be overlapped. The row is passed as first argument.",
                    "type": "Function"
                },
                {
                    "name": "end_callback",
                    "description": "Function executed when a row stops being\n overlapped. The row is passed as first argument.",
                    "type": "Function"
                }
            ],
            "itemtype": "method",
            "name": "on_overlapped_row_change",
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 1875,
            "description": "Sets the current position of the player",
            "params": [
                {
                    "name": "col",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "row",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "no_player",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "set_player",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 2182,
            "description": "See which of the widgets in the $widgets param collection can go to\na upper row and which not.",
            "itemtype": "method",
            "name": "widgets_contraints",
            "params": [
                {
                    "name": "$widgets",
                    "description": "A jQuery wrapped collection of\nHTMLElements.",
                    "type": "JQuery"
                }
            ],
            "return": {
                "description": "Returns a literal Object with two keys: `can_go_up` &\n`can_not_go_up`. Each contains a set of HTMLElements.",
                "type": "Object"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 2218,
            "description": "Sorts an Array of grid coords objects (representing the grid coords of\neach widget) in descending way.\n\nDepreciated.",
            "itemtype": "method",
            "name": "manage_movements",
            "params": [
                {
                    "name": "$widgets",
                    "description": "A jQuery collection of HTMLElements\n representing the widgets you want to move.",
                    "type": "JQuery"
                },
                {
                    "name": "to_col",
                    "description": "The column to which we want to move the widgets.",
                    "type": "Number"
                },
                {
                    "name": "to_row",
                    "description": "The row to which we want to move the widgets.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 2267,
            "description": "Determines if there is a widget in the row and col given. Or if the\nHTMLElement passed as first argument is the player.",
            "itemtype": "method",
            "name": "is_player",
            "params": [
                {
                    "name": "col_or_el",
                    "description": "A jQuery wrapped collection of\nHTMLElements.",
                    "type": "Number|HTMLElement"
                },
                {
                    "name": "row",
                    "description": "The column to which we want to move the widgets.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns true or false.",
                "type": "Boolean"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 2286,
            "description": "Determines if the widget that is being dragged is currently over the row\nand col given.",
            "itemtype": "method",
            "name": "is_player_in",
            "params": [
                {
                    "name": "col",
                    "description": "The column to check.",
                    "type": "Number"
                },
                {
                    "name": "row",
                    "description": "The row to check.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns true or false.",
                "type": "Boolean"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 2301,
            "description": "Determines if the placeholder is currently over the row and col given.",
            "itemtype": "method",
            "name": "is_placeholder_in",
            "params": [
                {
                    "name": "col",
                    "description": "The column to check.",
                    "type": "Number"
                },
                {
                    "name": "row",
                    "description": "The row to check.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns true or false.",
                "type": "Boolean"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 2315,
            "description": "Determines if the placeholder is currently over the column given.",
            "itemtype": "method",
            "name": "is_placeholder_in_col",
            "params": [
                {
                    "name": "col",
                    "description": "The column to check.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns true or false.",
                "type": "Boolean"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 2328,
            "description": "Determines if the cell represented by col and row params is empty.",
            "itemtype": "method",
            "name": "is_empty",
            "params": [
                {
                    "name": "col",
                    "description": "The column to check.",
                    "type": "Number"
                },
                {
                    "name": "row",
                    "description": "The row to check.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns true or false.",
                "type": "Boolean"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 2349,
            "description": "checks the grid to see if the desired column is a valid row in the config",
            "params": [
                {
                    "name": "col",
                    "description": "number to check",
                    "type": "Number"
                },
                {
                    "name": "size_y",
                    "description": "optional number of columns in the offset",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "true if the desire column exists in the grid.",
                "type": "Boolean"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 2363,
            "description": "checks the grid to see if the desired row is a valid row in the config",
            "params": [
                {
                    "name": "row",
                    "description": "number to check",
                    "type": "Number"
                },
                {
                    "name": "size_y",
                    "description": "optional number of rows in the offset",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "true if the desire row exists in the grid.",
                "type": "Boolean"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 2373,
            "description": "extract out the logic to calculate the highest col the widget needs\nin the grid in order to fit.  Based on the current row and desired size",
            "params": [
                {
                    "name": "col",
                    "description": "the column number of the current postiton of the widget",
                    "type": "Number"
                },
                {
                    "name": "size_x",
                    "description": "veritical size of the widget",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "highest col needed to contain the widget",
                "type": "Number"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 2384,
            "description": "extract out the logic to calculate the highest row the widget needs\nin the grid in order to fit.  Based on the current row and desired size",
            "params": [
                {
                    "name": "row",
                    "description": "the row number of the current postiton of the widget",
                    "type": "Number"
                },
                {
                    "name": "size_y",
                    "description": "horizontal size of the widget",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "highest row needed to contain the widget",
                "type": "Number"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 2395,
            "description": "Determines if the cell represented by col and row params is occupied.",
            "itemtype": "method",
            "name": "is_occupied",
            "params": [
                {
                    "name": "col",
                    "description": "The column to check.",
                    "type": "Number"
                },
                {
                    "name": "row",
                    "description": "The row to check.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns true or false.",
                "type": "Boolean"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 2420,
            "description": "Determines if there is a widget in the cell represented by col/row params.",
            "itemtype": "method",
            "name": "is_widget",
            "params": [
                {
                    "name": "col",
                    "description": "The column to check.",
                    "type": "Number"
                },
                {
                    "name": "row",
                    "description": "The row to check.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns false if there is no widget,\nelse returns the jQuery HTMLElement",
                "type": "Boolean|HTMLElement"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 2444,
            "description": "Determines if widget is supposed to be static.\nWARNING: as of 0.6.6 this feature is buggy when\nused with resizable widgets, as resizing widgets\nabove and below a static widgit can cause it to move.\nThis feature is considered experimental at this time",
            "itemtype": "method",
            "name": "is_static",
            "params": [
                {
                    "name": "col",
                    "description": "The column to check.",
                    "type": "Number"
                },
                {
                    "name": "row",
                    "description": "The row to check.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns true if widget exists and has static class,\nelse returns false",
                "type": "Boolean"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 2474,
            "description": "Determines if there is a widget in the cell represented by col/row\nparams and if this is under the widget that is being dragged.",
            "itemtype": "method",
            "name": "is_widget_under_player",
            "params": [
                {
                    "name": "col",
                    "description": "The column to check.",
                    "type": "Number"
                },
                {
                    "name": "row",
                    "description": "The row to check.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns true or false.",
                "type": "Boolean"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 2491,
            "description": "Get widgets overlapping with the player or with the object passed\nrepresenting the grid cells.",
            "itemtype": "method",
            "name": "get_widgets_under_player",
            "return": {
                "description": "Returns a jQuery collection of HTMLElements",
                "type": "HTMLElement"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 2514,
            "description": "Put placeholder at the row and column specified.",
            "itemtype": "method",
            "name": "set_placeholder",
            "params": [
                {
                    "name": "col",
                    "description": "The column to which we want to move the\n placeholder.",
                    "type": "Number"
                },
                {
                    "name": "row",
                    "description": "The row to which we want to move the\n placeholder.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 2586,
            "description": "Determines whether the player can move to a position above.",
            "itemtype": "method",
            "name": "can_go_player_up",
            "params": [
                {
                    "name": "widget_grid_data",
                    "description": "The actual grid coords object of the\n player.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "If the player can be moved to an upper row\n returns the row number, else returns false.",
                "type": "Number|Boolean"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 2639,
            "description": "Determines whether a widget can move to a position above.",
            "itemtype": "method",
            "name": "can_go_widget_up",
            "params": [
                {
                    "name": "widget_grid_data",
                    "description": "The actual grid coords object of the\n widget we want to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "If the widget can be moved to an upper row\n returns the row number, else returns false.",
                "type": "Number|Boolean"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 2696,
            "description": "Search a valid row for the widget represented by `widget_grid_data' in\nthe `upper_rows` array. Iteration starts from row specified in `min_row`.",
            "itemtype": "method",
            "name": "get_valid_rows",
            "params": [
                {
                    "name": "widget_grid_data",
                    "description": "The actual grid coords object of the\n player.",
                    "type": "Object"
                },
                {
                    "name": "upper_rows",
                    "description": "An array with columns as index and arrays\n of valid rows as values.",
                    "type": "Array"
                },
                {
                    "name": "min_row",
                    "description": "The upper row from which the iteration will start.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the upper row valid from the `upper_rows`\n for the widget in question.",
                "type": "Number|Boolean"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 2774,
            "description": "Get widgets overlapping with the player.",
            "itemtype": "method",
            "name": "get_widgets_overlapped",
            "return": {
                "description": "Returns a jQuery collection of HTMLElements.",
                "type": "JQuery"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 2807,
            "description": "This callback is executed when the player begins to collide with a column.",
            "itemtype": "method",
            "name": "on_start_overlapping_column",
            "params": [
                {
                    "name": "col",
                    "description": "The collided column.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns a jQuery collection of HTMLElements.",
                "type": "JQuery"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 2819,
            "description": "A callback executed when the player begins to collide with a row.",
            "itemtype": "method",
            "name": "on_start_overlapping_row",
            "params": [
                {
                    "name": "row",
                    "description": "The collided row.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns a jQuery collection of HTMLElements.",
                "type": "JQuery"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 2831,
            "description": "A callback executed when the the player ends to collide with a column.",
            "itemtype": "method",
            "name": "on_stop_overlapping_column",
            "params": [
                {
                    "name": "col",
                    "description": "The collided row.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns a jQuery collection of HTMLElements.",
                "type": "JQuery"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 2850,
            "description": "This callback is executed when the player ends to collide with a row.",
            "itemtype": "method",
            "name": "on_stop_overlapping_row",
            "params": [
                {
                    "name": "row",
                    "description": "The collided row.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns a jQuery collection of HTMLElements.",
                "type": "JQuery"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 2890,
            "description": "Move a widget to a specific row and column.\nIf the widget has widgets below, all of these widgets will be moved also",
            "itemtype": "method",
            "name": "move_widget",
            "params": [
                {
                    "name": "$widget",
                    "description": "The jQuery wrapped HTMLElement of the\nwidget is going to be moved.",
                    "type": "HTMLElement"
                },
                {
                    "name": "new_col",
                    "description": "the column number to be set in widget",
                    "type": "Number"
                },
                {
                    "name": "new_row",
                    "description": "the row number to be set in widget",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "is called when whole process is done.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 2925,
            "description": "Move a widget to a specific row. The cell or cells must be empty.\nIf the widget has widgets below, all of these widgets will be moved also\nif they can.",
            "itemtype": "method",
            "name": "move_widget_to",
            "params": [
                {
                    "name": "$widget",
                    "description": "The jQuery wrapped HTMLElement of the\nwidget is going to be moved.",
                    "type": "HTMLElement"
                },
                {
                    "name": "row",
                    "description": "- row to move the widget to"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 2968,
            "description": "Move up the specified widget and all below it.",
            "itemtype": "method",
            "name": "move_widget_up",
            "params": [
                {
                    "name": "$widget",
                    "description": "The widget you want to move.",
                    "type": "HTMLElement"
                },
                {
                    "name": "y_units",
                    "description": "The number of cells that the widget has to move.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns if the widget moved",
                "type": "Boolean"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 3019,
            "description": "Move down the specified widget and all below it.",
            "itemtype": "method",
            "name": "move_widget_down",
            "params": [
                {
                    "name": "$widget",
                    "description": "The jQuery object representing the widget\n you want to move.",
                    "type": "JQuery"
                },
                {
                    "name": "y_units",
                    "description": "The number of cells that the widget has to move.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 3073,
            "description": "Check if the widget can move to the specified row, else returns the\nupper row possible.",
            "itemtype": "method",
            "name": "can_go_up_to_row",
            "params": [
                {
                    "name": "widget_grid_data",
                    "description": "The current grid coords object of the\n widget.",
                    "type": "Number"
                },
                {
                    "name": "col",
                    "description": "The target column.",
                    "type": "Number"
                },
                {
                    "name": "row",
                    "description": "The target row.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the row number if the widget can move\n to the target position, else returns false.",
                "type": "Boolean|Number"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 3163,
            "description": "Get widgets below a widget.",
            "itemtype": "method",
            "name": "widgets_below",
            "params": [
                {
                    "name": "$el",
                    "description": "The jQuery wrapped HTMLElement.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A jQuery collection of HTMLElements.",
                "type": "JQuery"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 3193,
            "description": "Update the array of mapped positions with the new player position.",
            "itemtype": "method",
            "name": "set_cells_player_occupies",
            "params": [
                {
                    "name": "col",
                    "description": "The new player col.",
                    "type": "Number"
                },
                {
                    "name": "col",
                    "description": "The new player row.",
                    "type": "Number"
                },
                {
                    "name": "row",
                    "description": ""
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 3211,
            "description": "Remove from the array of mapped positions the reference to the player.",
            "itemtype": "method",
            "name": "empty_cells_player_occupies",
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 3265,
            "description": "Check if it's possible to move a widget to a specific col/row. It takes\ninto account the dimensions (`size_y` and `size_x` attrs. of the grid\n coords object) the widget occupies.",
            "itemtype": "method",
            "name": "can_move_to",
            "params": [
                {
                    "name": "widget_grid_data",
                    "description": "The grid coords object that represents\n the widget.",
                    "type": "Object"
                },
                {
                    "name": "col",
                    "description": "The col to check.",
                    "type": "Object"
                },
                {
                    "name": "row",
                    "description": "The row to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns true if all cells are empty, else return false.",
                "type": "Boolean"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 3310,
            "description": "Given the leftmost column returns all columns that are overlapping\n with the player.",
            "itemtype": "method",
            "name": "get_targeted_columns",
            "params": [
                {
                    "name": "from_col",
                    "description": "The leftmost column.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns an array with column numbers.",
                "type": "Array"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 3329,
            "description": "Given the upper row returns all rows that are overlapping with the player.",
            "itemtype": "method",
            "name": "get_targeted_rows",
            "params": [
                {
                    "name": "from_row",
                    "description": "The upper row.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns an array with row numbers.",
                "type": "Array"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 3346,
            "description": "Get all columns and rows that a widget occupies.",
            "itemtype": "method",
            "name": "get_cells_occupied",
            "params": [
                {
                    "name": "el_grid_data",
                    "description": "The grid coords object of the widget.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns an object like `{ cols: [], rows: []}`.",
                "type": "Object"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 3374,
            "description": "Iterate over the cells occupied by a widget executing a function for\neach one.",
            "itemtype": "method",
            "name": "for_each_cell_occupied\n widget.",
            "params": [
                {
                    "name": "grid_data",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": "The function to execute on each column\n iteration. Column and row are passed as arguments.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 3395,
            "description": "Iterate over the columns occupied by a widget executing a function for\neach one.",
            "itemtype": "method",
            "name": "for_each_column_occupied",
            "params": [
                {
                    "name": "el_grid_data",
                    "description": "The grid coords object that represents\n the widget.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function to execute on each column\n iteration. The column number is passed as first argument.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 3414,
            "description": "Iterate over the rows occupied by a widget executing a function for\neach one.",
            "itemtype": "method",
            "name": "for_each_row_occupied",
            "params": [
                {
                    "name": "el_grid_data",
                    "description": "The grid coords object that represents\n the widget.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function to execute on each column\n iteration. The row number is passed as first argument.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 3442,
            "description": "Traverse a series of widgets",
            "params": [
                {
                    "name": "type",
                    "description": "- currently supported 'for_each'"
                },
                {
                    "name": "direction",
                    "description": "- The direction to traverse.  Supports 'above' and 'below'\n   NOTE: the directions are based on the layout in the grid above is toward the top\n   and below is toward the bottom. EG opposite direction of the row numbers"
                },
                {
                    "name": "col",
                    "description": "- column to traverse"
                },
                {
                    "name": "row",
                    "description": "- starting row in the column"
                },
                {
                    "name": "callback",
                    "description": "- a function that will be called for every widget found"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 3505,
            "description": "Iterate over each widget above the column and row specified.",
            "itemtype": "method",
            "name": "for_each_widget_above",
            "params": [
                {
                    "name": "col",
                    "description": "The column to start iterating.",
                    "type": "Number"
                },
                {
                    "name": "row",
                    "description": "The row to start iterating.",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "The function to execute on each widget\n iteration. The value of `this` inside the function is the jQuery\n wrapped HTMLElement.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 3522,
            "description": "Iterate over each widget below the column and row specified.",
            "itemtype": "method",
            "name": "for_each_widget_below",
            "params": [
                {
                    "name": "col",
                    "description": "The column to start iterating.",
                    "type": "Number"
                },
                {
                    "name": "row",
                    "description": "The row to start iterating.",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "The function to execute on each widget\n iteration. The value of `this` inside the function is the jQuery wrapped\n HTMLElement.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 3539,
            "description": "Returns the highest occupied cell in the grid.",
            "itemtype": "method",
            "name": "get_highest_occupied_cell",
            "return": {
                "description": "Returns an object with `col` and `row` numbers.",
                "type": "Object"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 3566,
            "description": "return the widgets what exist within the given range of grid cells",
            "params": [
                {
                    "name": "col1",
                    "description": "- col of upper left search"
                },
                {
                    "name": "row1",
                    "description": "- row of upper left search"
                },
                {
                    "name": "col2",
                    "description": "- col of lower right search"
                },
                {
                    "name": "row2",
                    "description": "- row of lower right search"
                }
            ],
            "return": {
                "description": "- a collection of the cells within the range",
                "type": "*|jQuery|HTMLElement"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 3596,
            "description": "return any widget which is located at the given coordinates",
            "params": [
                {
                    "name": "col",
                    "description": "- col to search at"
                },
                {
                    "name": "row",
                    "description": "- row to search at"
                }
            ],
            "return": {
                "description": "- a collection of any widgets found.",
                "type": "*"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 3606,
            "description": "gets the list of widgets in either the row or the col passed in_loop\n Not sure if this makes sense for the API or what the use case is,\n  but I'm documenting it as it exists.",
            "params": [
                {
                    "name": "col",
                    "description": "- a col to search for widgets from"
                },
                {
                    "name": "row",
                    "description": "- a row to search for widgets from"
                }
            ],
            "return": {
                "description": "- a collection of the widgets in either\nthe row or the col passed in.",
                "type": "*|jQuery|HTMLElement"
            },
            "deprecated": true,
            "deprecationMessage": "- if you want to search for widgets in a cell or a range\nlook at get_widgets_in_range and get_widgets_at_cell",
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 3643,
            "description": "Set the current height of the parent grid.",
            "itemtype": "method",
            "name": "set_dom_grid_height",
            "return": {
                "description": "Returns the instance of the Gridster class.",
                "type": "Object"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 3660,
            "description": "Set the current width of the parent grid.",
            "itemtype": "method",
            "name": "set_dom_grid_width",
            "return": {
                "description": "Returns the instance of the Gridster class.",
                "type": "Object"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 3685,
            "description": "Checks if this grid is responsive.\nautogenerate_stylesheet be true, the widget base width should be auto, and there must be a max_cols set.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 3694,
            "description": "Generates the width of the grid columns based on the width of the window.",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 3703,
            "description": "Changes the minimum width of a widget based on the width of the window and the number of cols that can\nfit in it.",
            "return": {
                "description": "",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 3716,
            "description": "Switches between collapsed widgets the span the full width when the responsive_breakpoint is triggered.",
            "params": [
                {
                    "name": "collapse",
                    "description": ""
                },
                {
                    "name": "opts",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 3757,
            "description": "It generates the necessary styles to position the widgets.",
            "itemtype": "method",
            "name": "generate_stylesheet",
            "params": [
                {
                    "name": "opts",
                    "description": "- set of gridster config options to generate stylessheets based on",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster class.",
                "type": "Object"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 3824,
            "description": "Injects the given CSS as string to the head of the document.",
            "itemtype": "method",
            "name": "add_style_tag",
            "params": [
                {
                    "name": "css",
                    "description": "The styles to apply.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster class.",
                "type": "Object"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 3859,
            "description": "Remove the style tag with the associated id from the head of the document",
            "itemtype": "method",
            "name": "remove_style_tag",
            "return": {
                "description": "Returns the instance of the Gridster class.",
                "type": "Object"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 3879,
            "description": "Generates a faux grid to collide with it when a widget is dragged and\ndetect row or column that we want to go.",
            "itemtype": "method",
            "name": "generate_faux_grid",
            "params": [
                {
                    "name": "rows",
                    "description": "Number of columns.",
                    "type": "Number"
                },
                {
                    "name": "cols",
                    "description": "Number of rows.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster class.",
                "type": "Object"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 3903,
            "description": "Add cell to the faux grid.",
            "itemtype": "method",
            "name": "add_faux_cell",
            "params": [
                {
                    "name": "row",
                    "description": "The row for the new faux cell.",
                    "type": "Number"
                },
                {
                    "name": "col",
                    "description": "The col for the new faux cell.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster class.",
                "type": "Object"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 3936,
            "description": "Add rows to the faux grid.",
            "itemtype": "method",
            "name": "add_faux_rows",
            "params": [
                {
                    "name": "rows",
                    "description": "The number of rows you want to add to the faux grid.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster class.",
                "type": "Object"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 3964,
            "description": "Add cols to the faux grid.",
            "itemtype": "method",
            "name": "add_faux_cols",
            "params": [
                {
                    "name": "cols",
                    "description": "The number of cols you want to add to the faux grid.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster class.",
                "type": "Object"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 3994,
            "description": "Recalculates the offsets for the faux grid. You need to use it when\nthe browser is resized.",
            "itemtype": "method",
            "name": "recalculate_faux_grid",
            "return": {
                "description": "Returns the instance of the Gridster class.",
                "type": "Object"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 4029,
            "description": "Resize dimensions of widgets in grid based on given options",
            "itemtype": "method",
            "name": "resize_widget_dimensions",
            "params": [
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Gridster"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 4062,
            "description": "Get all widgets in the DOM and register them.",
            "itemtype": "method",
            "name": "get_widgets_from_DOM",
            "return": {
                "description": "Returns the instance of the Gridster class.",
                "type": "Object"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 4091,
            "description": "Helper function used to set the current number of columns in the grid",
            "params": [
                {
                    "name": "wrapper_width",
                    "description": ""
                }
            ],
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 4124,
            "description": "Calculate columns and rows to be set based on the configuration\n parameters, grid dimensions, etc ...",
            "itemtype": "method",
            "name": "generate_grid_and_stylesheet",
            "return": {
                "description": "Returns the instance of the Gridster class.",
                "type": "Object"
            },
            "class": "Gridster"
        },
        {
            "file": "src\\jquery.gridster.js",
            "line": 4155,
            "description": "Destroy this gridster by removing any sign of its presence, making it easy to avoid memory leaks",
            "itemtype": "method",
            "name": "destroy",
            "params": [
                {
                    "name": "remove",
                    "description": "If true, remove gridster from DOM.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster class.",
                "type": "Object"
            },
            "class": "Gridster"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\jquery.gridster.js:2373"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\jquery.gridster.js:2384"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\jquery.gridster.js:3566"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\jquery.gridster.js:3596"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\jquery.gridster.js:3606"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\jquery.gridster.js:3685"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\jquery.gridster.js:3694"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\jquery.gridster.js:3703"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\jquery.gridster.js:3716"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\jquery.gridster.js:4029"
        },
        {
            "message": "Missing item type\nConvert properties to Integer",
            "line": " src\\jquery.gridster.js:202"
        },
        {
            "message": "Missing item type",
            "line": " src\\jquery.gridster.js:317"
        },
        {
            "message": "Missing item type\nchecks the grid to see if the desired column is a valid row in the config",
            "line": " src\\jquery.gridster.js:2349"
        },
        {
            "message": "Missing item type\nchecks the grid to see if the desired row is a valid row in the config",
            "line": " src\\jquery.gridster.js:2363"
        },
        {
            "message": "Missing item type\nextract out the logic to calculate the highest col the widget needs\nin the grid in order to fit.  Based on the current row and desired size",
            "line": " src\\jquery.gridster.js:2373"
        },
        {
            "message": "Missing item type\nextract out the logic to calculate the highest row the widget needs\nin the grid in order to fit.  Based on the current row and desired size",
            "line": " src\\jquery.gridster.js:2384"
        },
        {
            "message": "Missing item type\nTraverse a series of widgets",
            "line": " src\\jquery.gridster.js:3442"
        },
        {
            "message": "Missing item type\nreturn the widgets what exist within the given range of grid cells",
            "line": " src\\jquery.gridster.js:3566"
        },
        {
            "message": "Missing item type\nreturn any widget which is located at the given coordinates",
            "line": " src\\jquery.gridster.js:3596"
        },
        {
            "message": "Missing item type\ngets the list of widgets in either the row or the col passed in_loop\n Not sure if this makes sense for the API or what the use case is,\n  but I'm documenting it as it exists.",
            "line": " src\\jquery.gridster.js:3606"
        },
        {
            "message": "Missing item type\nChecks if this grid is responsive.\nautogenerate_stylesheet be true, the widget base width should be auto, and there must be a max_cols set.",
            "line": " src\\jquery.gridster.js:3685"
        },
        {
            "message": "Missing item type\nGenerates the width of the grid columns based on the width of the window.",
            "line": " src\\jquery.gridster.js:3694"
        },
        {
            "message": "Missing item type\nChanges the minimum width of a widget based on the width of the window and the number of cols that can\nfit in it.",
            "line": " src\\jquery.gridster.js:3703"
        },
        {
            "message": "Missing item type\nSwitches between collapsed widgets the span the full width when the responsive_breakpoint is triggered.",
            "line": " src\\jquery.gridster.js:3716"
        },
        {
            "message": "Missing item type\nHelper function used to set the current number of columns in the grid",
            "line": " src\\jquery.gridster.js:4091"
        }
    ]
}